---


_icinga2_mariadb_packages:
  default:
    - python-mysqldb
    - python3-mysqldb
    - libmariadb-dev
  archlinux: []
  redhat-7:
    - MySQL-python
  centos-7:
    - mariadb
    - python36-PyMySQL
    - python2-PyMySQL
    - MySQL-python
  centos-8:
    - python36-devel
  centos:
    - MariaDB-client
    - python36-devel
  debian:
    - python-mysqldb
    - python3-mysqldb
  ubuntu-16:
    - python-mysqldb
    - python3-mysqldb
  ubuntu:
    - python-mysqldb
    - python3-mysqldb

_icinga2_mariadb_python_packages:
  default:
    - PyMySQL
    - mysqlclient
  debian:
    - PyMySQL
    - mysqlclient
  centos:
    - PyMySQL
    - mysqlclient

icinga2_mariadb_packages: "{{ _icinga2_mariadb_packages[ansible_distribution | lower ~ '-' ~ ansible_distribution_major_version ] |
  default(_icinga2_mariadb_packages[ansible_distribution | lower ~ '-' ~ ansible_distribution_major_version] |
  default(_icinga2_mariadb_packages[ansible_distribution | lower] |
  default(_icinga2_mariadb_packages['default']))) }}"

icinga2_mariadb_python_packages: "{{ _icinga2_mariadb_python_packages[ansible_distribution | lower ~ '-' ~ ansible_distribution_major_version] |
  default(_icinga2_mariadb_python_packages[ansible_distribution | lower] |
  default(_icinga2_mariadb_python_packages['default'])) }}"


icinga2_remove_old_cert: false
icinga2_installed_version: ''

_monitoring_plugins_directory:
  default: /usr/lib/nagios/plugins
  debian: /usr/lib/nagios/plugins
  redhat: /usr/lib64/nagios/plugins
  archlinux: /usr/lib/monitoring-plugins

_icinga2_user:
  default: nagios
  debian: nagios
  redhat: icinga
  archlinux: icinga

_icinga2_pki_userdir:
  default: nagios
  debian: nagios
  redhat: icinga
  archlinux: icinga

_icinga2_monitoring_plugins:
  default:
    - monitoring-plugins-standard
    - monitoring-plugins-basic
    - monitoring-plugins-common
    - libipc-run-perl
    - dnsutils
    - lynx
    # required for snmpget/check_snmp
    - snmp
    # To ensure ansible_default_ipv4 is populated
    - iproute2
  debian:
    - monitoring-plugins-standard
    - monitoring-plugins-basic
    - monitoring-plugins-common
    - libipc-run-perl
    - dnsutils
    - lynx
    # required for snmpget/check_snmp
    - snmp
    # To ensure ansible_default_ipv4 is populated
    - iproute2
  redhat:
    - nagios-plugins-all
    - lynx
    # required for snmpget/check_snmp
    - net-snmp
    # To ensure ansible_default_ipv4 is populated
    - iproute
    # for dig
    - bind-utils
  archlinux:
    - monitoring-plugins
    - lynx
    # required for snmpget/check_snmp
    - net-snmp
    # To ensure ansible_default_ipv4 is populated
    - iproute2
    # for dig
    - bind-tools


monitoring_plugins_directory: "{{ _monitoring_plugins_directory[ansible_os_family | lower] |
  default(_monitoring_plugins_directory['default']) }}"

icinga2_user: "{{ _icinga2_user[ansible_os_family | lower] |
  default(_icinga2_user['default']) }}"

icinga2_pki_userdir: "{{ _icinga2_pki_userdir[ansible_os_family | lower] |
  default(_icinga2_pki_userdir['default']) }}"

icinga2_monitoring_plugins: "{{ _icinga2_monitoring_plugins[ansible_os_family | lower] |
  default(_icinga2_monitoring_plugins['default']) }}"

icinga2_downtime_system_name_internal: ''


icinga2_apply_service_default:
  ssh:
    import: generic-service
    check_command: ssh
    assign_where: '(host.address || host.address6) && host.vars.os == "Linux"'
  ping4:
    import: generic-service
    check_command: ping4
    assign_where: host.address
  ping6:
    import: generic-service
    check_command: ping6
    assign_where: host.address6
  load:
    import: generic-service
    check_command: load
    # Used by the ScheduledDowntime apply rule in `downtimes.conf`.
    extra_parameters: |
      if(host.vars.downtime) {
        vars.backup_downtime = host.vars.downtime
      }
    assign_where: 'host.vars.os == "Linux"'
  icinga:
    import: generic-service
    check_command: icinga
    assign_where: 'host.name == NodeName'
  procs:
    import: generic-service
    check_command: procs
    assign_where: 'host.name == NodeName'
  users:
    import: generic-service
    check_command: users
    assign_where: 'host.vars.os == "Linux"'
  sensors:
    import: generic-service
    check_command: sensors
    assign_where: '"sensors" in host.vars.services'
  file_age:
    import: generic-service
    name: 'file_'
    for: '(file => config in host.vars.file_age)'
    check_command: file_age
    extra_parameters: |
      var warn_time = check_dictionary( config, "warning_time" )
      var crit_time = check_dictionary( config, "critical_time" )
      var warn_size = check_dictionary( config, "warning_size" )
      var crit_size = check_dictionary( config, "critical_size" )
      var description = check_dictionary( config, "description" )

      if( description ) {
        display_name = description
      } else {
        display_name = "File Age for " + file
      }
      notes        = "check a file age"

      vars = {
        "file_age_file" = file
      }

      if( warn_time && crit_time ) {
        vars += {
          "file_age_warning_time"  = config.warning_time
          "file_age_critical_time" = config.critical_time
        }
      }

      if( warn_size && crit_size ) {
        vars += {
          "file_age_warning_size"  = config.warning_size
          "file_age_critical_size" = config.critical_size
        }
      }

      /*    "file_age_ignoremissing" = config.ignoremissing*/

      max_check_attempts = 5
      check_interval = 10m
      retry_interval = 2
      enable_notifications = true
    assign_where: 'host.vars.file_age'
  uptime:
    import: generic-service
    display_name: system uptime
    check_command: system_uptime
    assign_where: '"uptime" in host.vars.services'


icinga2_checkcommands_default:
  hostname:
    import: plugin-check-command
    command: '[ PluginDir + "/check_docker_container" ]'
  check_redis:
    import: plugin-check-command
    command: '[ PluginDir + "/check_redis" ]'
  system_uptime:
    import: plugin-check-command
    command: '[ PluginDir + "/check_uptime.sh" ]'


icinga2_ido_default:
  type: mysql
  enabled: true
  username: 'icinga2_ido'
  password: 'icinga2_ido'
  host: '127.0.0.1'
  database: 'icinga2_ido'
  port: 3306
  socket: /run/mysqld.sock
  # Max age for ... Defaults to 0 (never)
  cleanup: {}
  mysql:
    schema_file: /usr/share/icinga2-ido-mysql/schema/mysql.sql
    schema_upgrade: /usr/share/icinga2-ido-mysql/schema/upgrade

icinga2_api_default:
  enabled: true
  accept_config: true
  accept_commands: true
  ticket_salt: TicketSalt
  user: {}
#     root:
#       password: foo
#       client_cn: NodeName
#       permissions: '*'

icinga2_filelogger_default:
  directory: /var/log/icinga2
  mainlog:
    severity: warning
    logfile: icinga2.log
#   debuglog:
#     severity: debug
#     logfile: debug.log
