---

#- debug:
#    var: "{{item}}"
#  when: item is defined
#  loop:
#    - icinga2_master_features_enabled
#    - icinga2_master_features_enabled | join(' ')
#    - icinga2_master_features_enabled | join('|') | regex_search('api')
#    - icinga2_master_features_enabled | join('|') | regex_search('checker')
#    - icinga2_master_features_enabled | join('|') | regex_search('ido(.*)')
#    - icinga2_master_features_enabled | join('|') | regex_search('ido-mysql')
#    - icinga2_master_features_enabled | join('|') | regex_search('ido-pgsql')
#    - icinga2_master_features_enabled | join('|') | regex_search('notification')
#

#- name: collecting currently enabled icinga2 features
#  shell: >
#    icinga2 feature list | grep -i enabled
#  register: featurelist
#  changed_when: False
#  tags:
#    - configure

- name: disable icinga2 features
  command: >
    icinga2 feature disable {{ item }}
  with_items:
    '{{ icinga2_master_features_disabled }}'
  notify:
    - restart icinga2
  tags:
    - configure

# configure API
- block:

    - name: configure api feature
      template:
        src:   etc/icinga2/features/api.conf.j2
        dest: /etc/icinga2/features-available/api.conf
        owner: root
        group: root
        mode: 0644

    - name: enable api feature
      command: >
        icinga2 feature enable api
      notify:
        - restart icinga2
      tags:
        - configure

  when: icinga2_master_features_enabled | join('|') | regex_search('api')

# configure notification
- block:

    - name: configure notification feature
      template:
        src:   etc/icinga2/features/notification.conf.j2
        dest: /etc/icinga2/features-available/notification.conf
        owner: root
        group: root
        mode: 0644

    - name: enable notification feature
      command: >
        icinga2 feature enable notification
      notify:
        - restart icinga2
      tags:
        - configure

  when: icinga2_master_features_enabled | join('|') | regex_search('notification')

# configure ido-mysql
- block:

    - name: Create a new database with name '{{icinga2_feature.ido_mysql.database }}'
      mysql_db:
        name: '{{ icinga2_feature.ido_mysql.database }}'
        state: present
      register: _mysql_ido_schema
      when: icinga2_master_features_enabled | join('|') | regex_search('ido-mysql')

    #- debug:
    #    var: "{{item}}"
    #  when: item is defined
    #  loop:
    #    - _mysql_ido_schema

#    - name: check mysql schema
#      command: >
#        mysql --skip-column-names --batch --execute="SELECT TABLE_SCHEMA FROM information_schema.tables WHERE table_schema = \"{{icinga2_feature.ido_mysql.database }}\" limit 1;"
#      register: _mysql_ido_schema
#      changed_when: false
#      check_mode: no
#      when: (
#        icinga2_feature.ido_mysql.enabled | bool)

    - name: check mysql database version
      command: >
        mysql --skip-column-names --batch --execute="select version from {{icinga2_feature.ido_mysql.database }}.icinga_dbversion"
      register: _mysql_ido_version
      changed_when: false
      # check_mode: no
      ignore_errors: true
      # no_log: no
      when: (
        icinga2_master_features_enabled | join('|') | regex_search('ido-mysql') and
        icinga2_feature.ido_mysql.enabled | bool and
        _mysql_ido_schema.failed == false)

    - debug:
        var: "{{item}}"
      when: item is defined
      loop:
        - _mysql_ido_version.stdout

    - name: create the mysql ido schema
      mysql_db:
        name: '{{ icinga2_feature.ido_mysql.database }}'
        state: import
        target: '{{ icinga2_ido_mysql_schema_file }}'
      register: mysql_create_ido_schema
      changed_when: false
      check_mode: no
      when: (
        icinga2_master_features_enabled | join('|') | regex_search('ido-mysql') and
        icinga2_feature.ido_mysql.enabled | bool and
        _mysql_ido_schema.failed == false and
        _mysql_ido_version.stdout == '')

    # TODO update ...

    - name: configure ido-mysql feature
      template:
        src: '{{ item.src }}'
        dest: "{{ item.dest }}"
        owner: root
        group: root
        mode: 0644
      with_items:
        - src:   etc/icinga2/features/ido-mysql.conf.j2
          dest: /etc/icinga2/features-available/ido-mysql.conf
      when: icinga2_master_features_enabled | join('|') | regex_search('ido-mysql')

    #- debug:
    #    var: "{{item}}"
    #  when: item is defined
    #  loop:
    #    - _mysql_ido_version

    #- name: set fact for ido-version
    #  set_fact:
    #    icinga2_ido_version: '{{_mysql_ido_version.stdout}}'
    #  when: (
    #    _mysql_ido_version is defined and
    #    _mysql_ido_version.stdout is defined)

    #- name: create custom fact file
    #  template:
    #    src: 'facts.d/icinga2.fact.j2'
    #    dest: '/etc/ansible/facts.d/icinga2.fact'
    #    owner: 'root'
    #    group: 'root'
    #    mode: '0755'


    - name: enable ido-mysql feature
      command: >
        icinga2 feature enable ido-mysql
      notify:
        - restart icinga2
      tags:
        - configure
      when: icinga2_master_features_enabled | join('|') | regex_search('ido-mysql')


    # TODO: postgresql
    - fail:
        msg: "The system may not be provisioned according to the CMDB status."
      when: (
        icinga2_master_features_enabled | join('|') | regex_search('ido-pgsql') and
        icinga2_feature.ido_pgsql.enabled | bool)

  when: icinga2_master_features_enabled | join('|') | regex_search('ido(.*)') #  is match(/ido.*/)


