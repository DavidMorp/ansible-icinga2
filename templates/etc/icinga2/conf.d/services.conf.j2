{{ ansible_managed | comment('cblock') }}

apply Service "ping4" {
  import "generic-service"
  check_command = "ping4"
  assign where host.address
}

apply Service "ping6" {
  import "generic-service"
  check_command = "ping6"
  assign where host.address6
}

apply Service "ssh" {
  import "generic-service"

  check_command = "ssh"

  assign where (host.address || host.address6) && host.vars.os == "Linux"
}

apply Service "HTTP: " for (http_vhost => config in host.vars.http_vhosts) {
  import "generic-service"

  check_command = "http"

  check_interval = 3m

  vars += config
}

apply Service "HTTPS: " for (https_vhost => config in host.vars.https_vhosts) {
  import "generic-service"

  check_command = "http"

  check_interval = 3m

  vars += config
  vars += {
    "http_vhost" = https_vhost
    "http_certificate" = "15"
    "http_sni" = true
    "http_ssl" = true
    "notify" = "true"
    "http_ssl_force_tlsv1_2_or_higher" = true
    /* "notification" = "aws_sns" */
  }

  assign where host.vars.https_vhosts
}

apply Service "dnssec " for (zone => config in host.vars.zones) {
  import "generic-service"
  check_command = "delv"
  check_interval = 2h
  vars += config
  assign where host.vars.zones
}

apply Service "dns" {
  import "generic-service"
  check_command = "dns"
  check_interval = 1m
  event_command = "restart_service"

  max_check_attempts = 2

  vars = {
    "dns_server" = "192.168.0.5"
    "dns_lookup" = "dunkelzahn.matrix.lan"
    "dns_timeout" = 2
    "procs_command" = "bind9"
  }

  assign where host.vars.zones
}

apply Service "rbl" {
  import "generic-service"

  check_command = "check_rbl"

  vars = {
    rbl_address = host.vars.rbl
  }

  assign where host.vars.rbl
}

/*
apply Service "rbl " for (zone => config in host.vars.rbl) {
  import "generic-service"
  check_command = "check_rbl"
  check_interval = 2h
  vars += config
  assign where host.vars.rbl
}
*/

apply Service "diskstat " for (device => config in host.vars.diskstat) {
  import "generic-service"
  check_command = "check_diskstat"
  check_interval = 2m

  vars = {
    "diskstat_dev" = device
  }
  vars += config
  assign where host.vars.diskstat
}


/**
  *  generic SSL Certificate check for all vhosts in vars.https_vhost
  */
/*
apply Service "SSL CERT: " for (https_vhost => config in host.vars.https_vhosts) {

  import "generic-service"

  display_name = "SSL Certificate"
  // notes        = "check ssl certificate"
  // notes_url    = "/doc/operations/http-certificate.html"

  check_command = "http"

  vars = {
    "http_vhost" = https_vhost
    "http_certificate" = "15"
    "http_port" = config.https_port
    "http_sni" = true
    "http_ssl" = true
  }

  max_check_attempts = 2
  check_interval = 10m
  retry_interval = 2
  enable_notifications = true

  assign where host.vars.https_vhosts
}
*/

apply Service for (disk => config in host.vars.disks) {
  import "generic-service"

  check_command = "disk"

  vars += config
}

apply Service "icinga" {
  import "generic-service"

  check_command = "icinga"

  assign where host.name == NodeName
}

apply Service "load" {
  import "generic-service"

  check_command = "load"

  /* Used by the ScheduledDowntime apply rule in `downtimes.conf`. */
  vars.backup_downtime = "10:00-10:30"

  assign where host.name == NodeName
}

apply Service "procs" {
  import "generic-service"

  check_command = "procs"

  assign where host.name == NodeName
}

{% if ansible_swaptotal_mb != 0 %}
/*
  we need an better implementation

    - ansible_swaptotal_mb = 0
    - ansible_system_vendor = NA
    - ansible_virtualization_type = openvz
    - ansible_virtualization_role = guest
*/
apply Service "swap" {
  import "generic-service"

  check_command = "swap"

  assign where host.name == NodeName
}
{% endif %}

apply Service "users" {
  import "generic-service"

  check_command = "users"

  assign where host.name == NodeName
}

apply Service "speedtest" {
  import "generic-service"

  check_command = "command-check-speedtest"

  max_check_attempts = 2
  check_interval = 15m
  retry_interval = 2

  assign where host.vars.speedtest
}

apply Service "DNS resolution - google" {
  import "generic-service"

  check_command = "dns"
  vars.dns_lookup = "$host_name$"
  vars.dns_server = "8.8.8.8"

  assign where "DNS-check" in host.groups
}

apply Service "DNS resolution - OpenDNS" {
  import "generic-service"

  check_command = "dns"
  vars.dns_lookup = "$host_name$"
  vars.dns_server = "208.67.222.222"

  assign where "DNS-check" in host.groups
}

apply Service "uptime" {
  import "generic-service"

  check_command = "snmp"
  vars.snmp_oid = "1.3.6.1.2.1.1.3.0"
  vars.snmp_miblist = "DISMAN-EVENT-MIB"

  assign where host.vars.snmp_community != ""
}

apply Service "fritzbox " for (fritz => config in host.vars.fritz_box) {
  import "generic-service"

  check_command = "fritz"

  vars += config
}

apply Service "imap" to Host {
  import "generic-service"

  display_name = "Mail IMAP"

  assign where "imap" in host.vars.services

  check_command = "imap"

  #max_check_attempts = 5
  #retry_interval = 10
  #enable_notifications = false
  #enable_flapping = true
  # enable_perfdata = true
}

apply Service "pop" to Host {
  import "generic-service"

  display_name = "Mail POP3"

  assign where "pop3" in host.vars.services || "pop" in host.vars.services

  check_command = "pop"
}

apply Service "smtp" to Host {
  import "generic-service"

  display_name = "Mail SMTP"

  assign where "smtp" in host.vars.services

  check_command = "smtp"
}

apply Service "sensors" to Host {
  import "generic-service"

  display_name = "sensors"

  assign where "sensors" in host.vars.services

  check_command = "sensors"
}

apply Service "mysql" to Host {
  import "generic-service"

  display_name = "MySQL"

  assign where "mysql" in host.vars.services

  check_command = "mysql"

  vars += {
    "mysql_hostname" = "127.0.0.1"
    "mysql_file" = "/usr/local/etc/.my.cnf"
  }
}

apply Service "apt" {
  import "generic-service"

  check_command = "apt"

  assign where host.vars.os == "Linux" && (host.vars.dist == "Debian" || host.vars.dist == "Ubuntu")
}

apply Service "dhcp" to Host {
  import "generic-service"

  display_name = "DHCP"

  assign where "dhcp" in host.vars.services

  check_command = "dhcp"

  vars += {
    "dhcp_unicast" = "true"
    "dhcp_serverip" = "192.168.0.5"
  }
}

apply Service "ntp" to Host {
  import "generic-service"

  display_name = "NTP"

  assign where "ntp" in host.vars.services

  check_command = "ntp_time"

  vars += {
    "ntp_address" = "192.168.0.5"
    "ntp_quiet" = "true"
    "ntp_warning" = "0.5"
    "ntp_critical" = "1"
    "ntp_ipv4" = "true"
  }
}

apply Service "cups" to Host {
  import "generic-service"

  display_name = "Cups"

  assign where "cups" in host.vars.services

  check_command = "cups"

  vars += {
    "cups_host" = "192.168.0.5"
    "cups_warning" = "2"
    "cups_critical" = "4"
  }
}


apply Service "docker-containers" to Host {
  import "generic-service"

  display_name = "docker containers"

  assign where host.vars.docker

  check_command = "check-docker"

  vars += {
    "docker_containers" = host.vars.docker
  }
}


apply Service "memory" {
  import "icinga-satellite-service"
  check_command = "check_memory"

  check_interval = 45s
  retry_interval = 10s

  command_endpoint = host.vars.remote_endpoint
  assign where host.vars.satellite && host.vars.memory
  ignore where host.vars.os == "Windows"
}

